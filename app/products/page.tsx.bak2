"use client";
import { useState, useEffect } from "react";
import dynamic from 'next/dynamic'
import { DataTable } from '@/app/products/data-table';
import { Product, columns } from './columns'; // Adjust the import path as needed
import Container from '@/components/ui/container';
import { Button } from '@/components/ui/button';
import { ConfettiButton } from '@/components/ui/confetti';
// const ComponentC = dynamic(() => import('../components/data-table'), { ssr: false })
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { revalidatePath } from 'next/cache'
import {
    Sheet,
    SheetClose,
    SheetContent,
    SheetDescription,
    SheetFooter,
    SheetHeader,
    SheetTitle,
    SheetTrigger,
} from "@/components/ui/sheet"
import { SheetDemo } from './add-product';
import { RefreshCcw } from "lucide-react"

// ...existing imports...

// Move getProducts to be available in component scope
async function getProducts(): Promise<Product[]> {
    const res = await fetch('http://localhost:3000/products', {
        cache: 'no-store',
    });
    if (!res.ok) {
        throw new Error('Failed to fetch products');
    }
    return res.json();
}

// Convert to client component
export default function Page() {
    const [data, setData] = useState<Product[]>([]);
    const [isLoading, setIsLoading] = useState(true);

    const fetchData = async () => {
        try {
            const products = await getProducts();
            setData(products);
        } catch (error) {
            console.error('Error fetching products:', error);
        } finally {
            setIsLoading(false);
        }
    };

    useEffect(() => {
        fetchData();
    }, []);

    return (
        <Container className='mt-6 mb-8'>
            <section>
                <div className="container mx-auto">
                    <div className="flex justify-between items-center mb-2">
                        <h1 className="text-3xl font-bold mb-0 mt-[-1rem]">All Products</h1>
                        <RefreshTable onRefresh={fetchData} isLoading={isLoading} />
                    </div>
                    <DataTable columns={columns} data={data} />
                </div>
            </section>
        </Container>
    );
}

interface RefreshTableProps {
    onRefresh: () => Promise<void>;
    isLoading: boolean;
}

function RefreshTable({ onRefresh, isLoading }: RefreshTableProps) {
    return (
        <div>
            <Button
                variant="outline"
                size="icon"
                onClick={onRefresh}
                disabled={isLoading}
            >
                <RefreshCcw className={`h-4 w-4 ${isLoading ? 'animate-spin' : ''}`} />
            </Button>
        </div>
    );
}